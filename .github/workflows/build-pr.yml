name: Build Website - Pull Request

on:
  pull_request:
  workflow_dispatch:

jobs:
  start-deployment:
    runs-on: ubuntu-latest

    outputs:
      env: ${{ steps.config.outputs.env }}
      deployment_id: ${{ steps.capture_vars.outputs.deployment_id }}
      plotnine-branch: ${{ steps.target.outputs.plotnine-branch }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Pull Request Release Name
        id: config
        if: ${{github.event_name == 'pull_request'}}
        run: |
          echo "env=pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
        env:
          PR_NUMBER: ${{ github.event.number }}

      - name: Create Deployment Status
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.config.outputs.env }}
          ref: ${{ github.head_ref }}

      # https://github.com/bobheadxi/deployments/issues/161#issuecomment-2682715103
      # Accessing the environment variables (from step outputs) in another job does
      # not work. So we lift them into the jobs outputs
      - name: Capture deployment environment variables
        id: capture_vars
        run: |
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
        env:
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}

      - name: Get Build Target
        id: target
        run: |
          echo "${{ github.event.pull_request.body }}" > pr_message.txt
          python .github/utils/please.py set_plotnine_branch pr_message.txt
          rm -f pr_message.txt

      - name: See outputs
        run: |
          echo 'env=${{ steps.config.outputs.env }}'
          echo 'deployment_id=${{ steps.capture_vars.outputs.deployment_id }}'
          echo 'plotnine-branch=${{ steps.target.outputs.plotnine-branch }}'

  build-site:
    name: Build site
    needs: start-deployment
    uses: ./.github/workflows/build.yml
    with:
      plotnine-branch: ${{ needs.start-deployment.outputs.plotnine-branch }}
      target-folder: ""

  deploy-site:
    needs: [build-site, start-deployment]
    runs-on: ubuntu-latest

    steps:
      - name: Download built documentation
        uses: actions/download-artifact@v4
        with:
          pattern: _site

      - name: Deploy
        run: |
          ls -la _site
          npm install -g netlify-cli
          netlify deploy --dir="_site" --alias="${ALIAS}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          ALIAS: ${{ needs.start-deployment.outputs.env }}

  finish-deployment:
    needs: [deploy-site, start-deployment] 
    runs-on: ubuntu-latest
    steps:
      - name: Update Deployment Status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ needs.start-deployment.outputs.env }}
          env_url: "https://${{ needs.start-deployment.outputs.env }}--plotnine.netlify.app"
          deployment_id: ${{ needs.start-deployment.outputs.deployment_id }}
          logs: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
