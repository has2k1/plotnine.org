---
title: Theming Specific Elements
jupyter: python3
author: Hassan Kibirige
categories: [theme]
---

{{< include _setup.qmd >}}

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:11.910664Z', iopub.status.busy: '2024-03-05T11:33:11.910351Z', iopub.status.idle: '2024-03-05T11:33:12.717378Z', shell.execute_reply: '2024-03-05T11:33:12.716312Z'}

from plotnine import (
    ggplot,
    aes,
    geom_point,
    facet_grid,
    labs,
    guide_legend,
    guides,
    theme,
    element_text,
    element_line,
    element_rect,
    theme_set,
    theme_void,
)
from plotnine.data import mtcars

# We use theme_void as the base theme so that the modifications
# we make in the code are transparent in the output
theme_set(theme_void())
```

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:12.720621Z', iopub.status.busy: '2024-03-05T11:33:12.720360Z', iopub.status.idle: '2024-03-05T11:33:12.734561Z', shell.execute_reply: '2024-03-05T11:33:12.734024Z'}
mtcars.head()
```

The base plots we will use for the demonstation and some colors.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:12.775629Z', iopub.status.busy: '2024-03-05T11:33:12.775363Z', iopub.status.idle: '2024-03-05T11:33:12.782380Z', shell.execute_reply: '2024-03-05T11:33:12.781831Z'}
p1 = (
    ggplot(mtcars, aes("wt", "mpg", color="factor(cyl)"))
    + geom_point()
    + labs(title="mpg vs wt")
)

p2 = p1 + facet_grid("gear", "am")

black = "#222222"
gray = "#666666"
red = "#FF3333"
green = "#66CC00"
blue = "#3333FF"
purple = "#9933FF"
orange = "#FF8000"
yellow = "#FFFF33"
```

What the plots look like unmodified (unthemed).

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:12.785477Z', iopub.status.busy: '2024-03-05T11:33:12.785228Z', iopub.status.idle: '2024-03-05T11:33:13.952215Z', shell.execute_reply: '2024-03-05T11:33:13.951605Z'}
p1
```

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:13.955226Z', iopub.status.busy: '2024-03-05T11:33:13.954899Z', iopub.status.idle: '2024-03-05T11:33:14.516734Z', shell.execute_reply: '2024-03-05T11:33:14.515922Z'}
p2
```

There are 3 main top level theming elements:

1. `text` - controls all the text elements in the figure.
2. `rect` - controls all the rectangles in the figure.
3. `line` - controls all the lines in the figure.

Note that none of the `themeables` control/modify the plotted data. e.g You cannot
use `text` to change the appearance of objects plotted with `geom_text`.

**text**

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:14.519586Z', iopub.status.busy: '2024-03-05T11:33:14.519368Z', iopub.status.idle: '2024-03-05T11:33:14.775547Z', shell.execute_reply: '2024-03-05T11:33:14.774906Z'}
p1 + theme(text=element_text(color=purple))
```

**rect**

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:14.778241Z', iopub.status.busy: '2024-03-05T11:33:14.778028Z', iopub.status.idle: '2024-03-05T11:33:15.104832Z', shell.execute_reply: '2024-03-05T11:33:15.104272Z'}
p1 + theme(rect=element_rect(color=black, size=3, fill="#EEBB0050"))
```

**line**

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:15.107529Z', iopub.status.busy: '2024-03-05T11:33:15.107294Z', iopub.status.idle: '2024-03-05T11:33:15.333671Z', shell.execute_reply: '2024-03-05T11:33:15.332980Z'}
p1 + theme(line=element_line(color=black))
```

## Theming specific items

### axis_line and axis_text

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:15.336600Z', iopub.status.busy: '2024-03-05T11:33:15.336370Z', iopub.status.idle: '2024-03-05T11:33:15.598610Z', shell.execute_reply: '2024-03-05T11:33:15.598061Z'}
p1 + theme(
    axis_line=element_line(size=2),
    axis_line_x=element_line(color=red),
    axis_line_y=element_line(color=blue),
    axis_text=element_text(margin={"t": 5, "r": 5}),
    axis_text_x=element_text(color=black),
    axis_text_y=element_text(color=purple),
)
```

{{< include _save_img.qmd >}}

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:15.601564Z', iopub.status.busy: '2024-03-05T11:33:15.601326Z', iopub.status.idle: '2024-03-05T11:33:15.940921Z', shell.execute_reply: '2024-03-05T11:33:15.940260Z'}
p1 + theme(
    axis_line=element_line(size=0.7, color=gray),
    # We are focusing on the ticks, make them long
    axis_ticks_length=20,
    axis_ticks_length_minor=10,
    axis_ticks_length_major=20,
    axis_ticks=element_line(size=2),
    axis_ticks_major=element_line(color=purple),
    axis_ticks_major_x=element_line(size=4),  # override size=2
    axis_ticks_major_y=element_line(color=yellow),  # override color=purple
    axis_ticks_minor=element_line(color=red),
    axis_ticks_minor_x=element_line(),  # do not override anything
    axis_ticks_minor_y=element_line(color=gray),  # override color=red
)
```

### axis_title and axis_ticks_pad

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:15.943544Z', iopub.status.busy: '2024-03-05T11:33:15.943282Z', iopub.status.idle: '2024-03-05T11:33:16.189188Z', shell.execute_reply: '2024-03-05T11:33:16.188656Z'}
p1 + theme(
    axis_line=element_line(size=0.7, color=gray),
    axis_ticks=element_line(),
    axis_title=element_text(),
    axis_title_x=element_text(color=blue),
    axis_title_y=element_text(color=red),
    # The gap between the title and the ticks
    axis_ticks_pad=20,
    axis_ticks_pad_major=20,
    axis_ticks_pad_minor=20,
)
```

### axis_ticks_direction

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:16.191971Z', iopub.status.busy: '2024-03-05T11:33:16.191736Z', iopub.status.idle: '2024-03-05T11:33:16.435252Z', shell.execute_reply: '2024-03-05T11:33:16.433309Z'}
p1 + theme(
    axis_line=element_line(size=0.7, color=gray),
    axis_ticks=element_line(),
    axis_ticks_direction="in",
    axis_ticks_direction_x="in",
    axis_ticks_direction_y="out",
)
```

### Legend_box

Not all themeables that affect the legend box are demonstrated

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:16.438066Z', iopub.status.busy: '2024-03-05T11:33:16.437849Z', iopub.status.idle: '2024-03-05T11:33:16.722146Z', shell.execute_reply: '2024-03-05T11:33:16.721573Z'}
(
    p1
    + aes(fill="drat")
    + theme(
        legend_position="left",
        legend_direction="horizontal",  # affected by the ncol=2
        legend_box_margin=5,
        legend_background=element_rect(color=purple, size=2, fill="white"),
        legend_box="vertical",
        legend_key=element_rect(fill=gray, alpha=0.3),
        legend_title=element_text(color=orange, va="top"),
        legend_text=element_text(weight="bold"),
        legend_key_spacing=10,  # overridden
        legend_key_spacing_x=15,
        legend_key_spacing_y=5,
    )
    # so we can see legend_entry_spacing in action
    + guides(color=guide_legend(ncol=2))
)
```

### plot_background, panel_background and panel_border

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:16.724838Z', iopub.status.busy: '2024-03-05T11:33:16.724518Z', iopub.status.idle: '2024-03-05T11:33:17.491996Z', shell.execute_reply: '2024-03-05T11:33:17.491414Z'}
p2 + theme(
    plot_background=element_rect(fill="gray", alpha=0.3),
    panel_background=element_rect(fill=purple, alpha=0.2),
    panel_border=element_rect(color=red, size=1),
    panel_spacing=0.025,
)
```

### panel_grid

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:17.494645Z', iopub.status.busy: '2024-03-05T11:33:17.494425Z', iopub.status.idle: '2024-03-05T11:33:17.752955Z', shell.execute_reply: '2024-03-05T11:33:17.752375Z'}
p1 + theme(
    panel_grid=element_line(color=purple),
    panel_grid_major=element_line(size=1.4, alpha=1),
    panel_grid_major_x=element_line(linetype="dashed"),
    panel_grid_major_y=element_line(linetype="dashdot"),
    panel_grid_minor=element_line(alpha=0.25),
    panel_grid_minor_x=element_line(color=red),
    panel_grid_minor_y=element_line(color=green),
    panel_ontop=False,  # puts the points behind the grid
)
```

### strip_background, strip_align and strip_text

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:17.755852Z', iopub.status.busy: '2024-03-05T11:33:17.755610Z', iopub.status.idle: '2024-03-05T11:33:18.338444Z', shell.execute_reply: '2024-03-05T11:33:18.337872Z'}
p2 + theme(
    panel_spacing=0.025,
    panel_background=element_rect(fill=gray, alpha=0.2),
    strip_background=element_rect(color=purple, fill=orange, size=1.4, alpha=0.95),
    strip_background_x=element_rect(x=1 / 6, width=2 / 3),  # you can get really crazy
    strip_background_y=element_rect(),
    strip_align=0,
    strip_align_x=0.2,
    strip_align_y=0.2,
    strip_text=element_text(weight="bold"),
    strip_text_x=element_text(color=red),
    strip_text_y=element_text(color=blue),
)
```

### aspect_ratio and figure_size

The `aspect_ratio` takes precedence over the `figure_size`, and it modifies
the height. The effective width and height are:

```python
width = figure_size[0]
height = figure_size[0] * aspect_ratio
```

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:33:18.341043Z', iopub.status.busy: '2024-03-05T11:33:18.340823Z', iopub.status.idle: '2024-03-05T11:33:18.761397Z', shell.execute_reply: '2024-03-05T11:33:18.760867Z'}
p1 + theme(
    panel_background=element_rect(fill=gray, alpha=0.2),
    figure_size=(8, 6),  # inches
    aspect_ratio=1 / 3,  # height:width
)
```

