---
title: Step plots
jupyter: python3
---

```{python}

from plotnine import ggplot, aes, geom_step, geom_line, labs, theme, element_text
from plotnine.data import economics
```


`geom_step()` connects points using 'steps' instead of a line.


```{python}
# inspect the data
economics.head()
```

Plot a step plot using `geom_plot()`. Notice from the first point the line travels vertically then horizontally:

```{python}
(
    ggplot(
        economics.iloc[:20],  # filter for first twenty rows (dates) to make steps more visible
        aes("date", "unemploy"),
    )
    + geom_step()  # step plot
    + labs(x="date", y="unemployment (,000)")  # label x & y-axis
    + theme(axis_text_x=element_text(angle=45))  # rotate x-axis text for readability
)
```

You can see how `geom_path()` (shown in pink) differs from `geom_line()` (black):

```{python}
(
    ggplot(economics.iloc[:20], aes("date", "unemploy"))
    + geom_step(
        colour="#ff69b4",  # plot geom_step as the first layer - colour pink
        alpha=0.5,  # line transparency
        size=2.5,
    )  # line thickness
    + geom_line()  # plot geom_line as the second layer
    + labs(x="date", y="unemployment (,000)")
    + theme(axis_text_x=element_text(angle=45))
)
```

Rather than a line that travels vertically then horizontally, this order can be switched by specifying `direction='vh'` within `geom_step()`. Below `direction='vh'` is shown in black with the default `direction='hv'` shown in pink:

```{python}
(
    ggplot(economics.iloc[:20], aes("date", "unemploy"))
    + geom_step(
        colour="#ff69b4",  # plot geom_path with default direction as the first layer - colour pink
        linetype="dashed",  # line type
        size=2,  # line thickness
        alpha=0.5,
    )  # line transparency
    + geom_step(direction="vh")  # plot geom_path with step order reversed
    + labs(x="date", y="unemployment (,000)")
    + theme(axis_text_x=element_text(angle=45))
)
```

