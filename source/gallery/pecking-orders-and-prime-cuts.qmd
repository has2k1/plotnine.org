---
title:  Pecking Orders and Prime Cuts
jupyter: python3
categories: [line plot, facet, theme]
author: Hassan Kibirige
---

{{< include _setup.qmd >}}

```{python}
from plotnine import (
    ggplot,
    aes,
    geom_line,
    facet_wrap,
    labs,
    scale_x_datetime,
    element_text,
    theme_538
)
from plotnine.data import meat
```


`geom_line()` connects the dots, and is useful for time series data.


```{python}
meat.head()
```

Make it tidy.

```{python}
meat_long = meat.melt(
    id_vars="date",
    value_vars=["beef", "veal", "pork", "lamb_and_mutton", "broilers", "turkey"],
    var_name="animal",
    value_name="weight"
).dropna()

meat_long.head()
```

First try

```{python}
p = (
    ggplot(meat_long, aes(x="date", y="weight"))
    + geom_line()
)
p
```

It looks crowded because each there is more than one monthly entry at each x-point.
We can get a single trend line by getting a monthly aggregate of the weights.

```{python}
meat_long_monthly_agg = meat_long.groupby("date").agg({"weight": "sum"}).reset_index()
meat_long_monthly_agg
```

### A Single Trend Line

```{python}
(
    ggplot(meat_long_monthly_agg, aes(x="date", y="weight"))
    + geom_line()
)
```

Add some style

```{python}
(
    ggplot(meat_long_monthly_agg, aes(x="date", y="weight"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

Or we can group by the animals to get a trend line for each animal

### Multiple Trend Lines

```{python}
(
    ggplot(meat_long, aes(x="date", y="weight", group="animal"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

Make each group be a different color.

```{python}
(
    ggplot(meat_long, aes(x="date", y="weight", color="animal"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

### A Trend Line Per Facet

Plot each group on a separate panel. The legend is no longer required and we adjust to the smaller panels by reducing the `size` of the line, `size` of the text and the number of grid lines.

```{python}
def titled(strip_title):
    return " ".join(s.title() if s != "and" else s for s in strip_title.split("_"))

(
    ggplot(meat_long, aes("date", "weight", color="animal"))
    + geom_line(size=.5, show_legend=False)
    + facet_wrap("animal", labeller=titled)
    + scale_x_datetime(date_breaks="20 years", date_labels="%Y")
    + labs(
        x="Date",
        y="Weight (million pounds)",
        title="Meat Production Through the Decades"
    )
    + theme_538(base_size=9)
)
```

{{< include _save_img.qmd >}}
