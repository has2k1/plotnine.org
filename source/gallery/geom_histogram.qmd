---
title: Histogram
jupyter: python3
author: Hassan Kibirige
categories: [histogram, theme]
---
{{< include _setup.qmd >}}
{{< include _add_img.qmd >}}

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:54.109722Z', iopub.status.busy: '2024-03-05T11:28:54.109334Z', iopub.status.idle: '2024-03-05T11:28:54.840137Z', shell.execute_reply: '2024-03-05T11:28:54.839341Z'}

from plotnine import (
    ggplot,
    aes,
    after_stat,
    geom_histogram,
    facet_wrap,
    facet_grid,
    coord_flip,
    scale_y_continuous,
    scale_y_sqrt,
    scale_y_log10,
    scale_fill_manual,
    theme_bw,
    theme_xkcd,
)
from plotnine.data import diamonds
from mizani.formatters import percent_format
```


Visualise the distribution of a variable by dividing the x-axis into bins and counting the number of observations in each bin. Histograms display the counts with bars.

You can define the number of bins (e.g. divide the data five bins) or define the binwidth (e.g. each bin is size 10).

Distributions can be visualised as:
* count,
* normalised count,
* density,
* normalised density,
* scaled density as a percentage.


```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:54.843956Z', iopub.status.busy: '2024-03-05T11:28:54.843493Z', iopub.status.idle: '2024-03-05T11:28:54.859801Z', shell.execute_reply: '2024-03-05T11:28:54.858936Z'}
diamonds.head(5)
```

### Basic Histogram

If you create a basic histogram, you will be prompted to define the binwidth or number of bins.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:54.903123Z', iopub.status.busy: '2024-03-05T11:28:54.902852Z', iopub.status.idle: '2024-03-05T11:28:56.288618Z', shell.execute_reply: '2024-03-05T11:28:56.287946Z'}
# Gallery, distributions
(
    ggplot(diamonds, aes(x="carat"))
    + geom_histogram()
)
```

You can define the width of the bins, by specifying the `binwidth` inside `geom_histogram()`.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:56.292163Z', iopub.status.busy: '2024-03-05T11:28:56.291836Z', iopub.status.idle: '2024-03-05T11:28:56.565664Z', shell.execute_reply: '2024-03-05T11:28:56.565095Z'}
(
    ggplot(diamonds, aes(x="carat"))
    + geom_histogram(binwidth=0.5)  # specify the binwidth
)
```

Or you can define the number of bins by specifying `bins` inside `geom_histogram()`. Note, the example below uses 10 bins, however you can't see them all because some of the bins are too small to be noticeable.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:56.568322Z', iopub.status.busy: '2024-03-05T11:28:56.568096Z', iopub.status.idle: '2024-03-05T11:28:56.866873Z', shell.execute_reply: '2024-03-05T11:28:56.866169Z'}
(
    ggplot(diamonds, aes(x="carat"))
    + geom_histogram(bins=10)  # specify the number of bins
)
```

There are different ways to visualise the distribution, you can specify this using the `y` argument within `aes()`. In the example below I'm using the default setting: raw count with `after_stat('count')`.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:56.869756Z', iopub.status.busy: '2024-03-05T11:28:56.869516Z', iopub.status.idle: '2024-03-05T11:28:57.143116Z', shell.execute_reply: '2024-03-05T11:28:57.142262Z'}
(
    ggplot(
        diamonds,
        aes(
            x="carat",
            y=after_stat("count"),  # specify each bin is a count
        ),
    )
    + geom_histogram(binwidth=0.50)
)
```

You can normalise the raw count to 1 by using `after_stat('ncount')`:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:57.146075Z', iopub.status.busy: '2024-03-05T11:28:57.145843Z', iopub.status.idle: '2024-03-05T11:28:57.428405Z', shell.execute_reply: '2024-03-05T11:28:57.427868Z'}
(
    ggplot(
        diamonds,
        aes(
            x="carat",
            y=after_stat("ncount"),  # normalise the count to 1
        ),
    )
    + geom_histogram(binwidth=0.50)
)
```

You can display the density of points in a bin, (this is scaled to integrate to 1) by using `after_stat('density')`:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:57.431123Z', iopub.status.busy: '2024-03-05T11:28:57.430894Z', iopub.status.idle: '2024-03-05T11:28:57.709212Z', shell.execute_reply: '2024-03-05T11:28:57.708582Z'}
(
    ggplot(
        diamonds,
        aes(
            x="carat",
            y=after_stat("density"),  # density
        ),
    )
    + geom_histogram(binwidth=0.50)
)
```

The proportion of bins can be shown, in the example below the `bin=0.5` accounts for about ~55% of the data:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:57.712257Z', iopub.status.busy: '2024-03-05T11:28:57.712019Z', iopub.status.idle: '2024-03-05T11:28:57.982186Z', shell.execute_reply: '2024-03-05T11:28:57.981491Z'}
(
    ggplot(
        diamonds,
        aes(x="carat", y=after_stat("width*density")),  # show proportion
    )
    + geom_histogram(binwidth=0.5)
)
```

We can also display counts as percentages by using the `percent_format()` which requires the `mizani.formatters` library:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:57.985393Z', iopub.status.busy: '2024-03-05T11:28:57.985151Z', iopub.status.idle: '2024-03-05T11:28:58.267973Z', shell.execute_reply: '2024-03-05T11:28:58.267405Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("width*density")))
    + geom_histogram(binwidth=0.5)
    + scale_y_continuous(labels=percent_format())  # display labels as a percentage
)
```

Instead of using `stat` you can use `stat_bin` defined within `geom_histogram()`, this is useful if you want to layer a few different plots in the one figure.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:58.270742Z', iopub.status.busy: '2024-03-05T11:28:58.270508Z', iopub.status.idle: '2024-03-05T11:28:58.660681Z', shell.execute_reply: '2024-03-05T11:28:58.659743Z'}
(
    ggplot(diamonds, aes(x="carat"))
    + geom_histogram(binwidth=0.5, alpha=0.5)
    + geom_histogram(binwidth=0.2, alpha=0.5, fill="green")
)
```

You can also flip the x-y coordinates:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:58.663396Z', iopub.status.busy: '2024-03-05T11:28:58.663169Z', iopub.status.idle: '2024-03-05T11:28:59.042410Z', shell.execute_reply: '2024-03-05T11:28:59.041743Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("density")))
    + geom_histogram(binwidth=0.5)
    + coord_flip()
)
```

You can visualise counts by other variables using `fill` within `aes()`:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:59.045516Z', iopub.status.busy: '2024-03-05T11:28:59.045220Z', iopub.status.idle: '2024-03-05T11:28:59.441699Z', shell.execute_reply: '2024-03-05T11:28:59.441071Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("count"), fill="cut"))
    + geom_histogram(binwidth=0.5)
)
```

You can visualise too-small-to-see bars by transforming the y-axis scaling by using `scale_y_sqrt()` square-root scale or `scale_y_log10()` for a log-scale (similarly use `scale_x_sqrt()` and `scale_x_log10()` to transform the x-axis).

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:59.444525Z', iopub.status.busy: '2024-03-05T11:28:59.444303Z', iopub.status.idle: '2024-03-05T11:28:59.717973Z', shell.execute_reply: '2024-03-05T11:28:59.717342Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("count")))
    + geom_histogram(binwidth=0.5)
    + scale_y_sqrt()  # square root scale
)
```

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:28:59.720489Z', iopub.status.busy: '2024-03-05T11:28:59.720285Z', iopub.status.idle: '2024-03-05T11:29:00.069648Z', shell.execute_reply: '2024-03-05T11:29:00.069154Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("count")))
    + geom_histogram(binwidth=0.5)
    + scale_y_log10()  # log scale
)
```

Change the look of your plot:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:29:00.072430Z', iopub.status.busy: '2024-03-05T11:29:00.072200Z', iopub.status.idle: '2024-03-05T11:29:00.445909Z', shell.execute_reply: '2024-03-05T11:29:00.445372Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("density")))
    + geom_histogram(
        binwidth=0.5,
        fill="green",  # change the fill colour (one colour)
        colour="pink",  # change the outline
        size=2,  # change the thickness of the outline
        alpha=0.7,  # change the transparency
    )
    + theme_xkcd()  # play with themes (look/arrangement)
)
```

{{< include _save_img.qmd >}}

Another change, this time changing the fill colours manually:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:29:00.448512Z', iopub.status.busy: '2024-03-05T11:29:00.448302Z', iopub.status.idle: '2024-03-05T11:29:00.856909Z', shell.execute_reply: '2024-03-05T11:29:00.856313Z'}
(
    ggplot(
        diamonds,
        aes(
            x="carat",
            y=after_stat("density"),
            fill="cut",  # change the fill colour using another variable
        ),
    )
    + scale_fill_manual(
        values=["#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442"]
    )  # change the fill colour
    + geom_histogram(
        binwidth=0.5,
        colour="#D55E00",  # change the outline
        size=1,  # change the thickness of the outline
        alpha=0.7,  # change the transparency
    )
    + theme_bw()  # play with themes (look/arrangement)
)
```

When faceting histograms with scaled counts/densities, they are normalised by each facet, and not overall. Here's an example of a facet wrap:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:29:00.859554Z', iopub.status.busy: '2024-03-05T11:29:00.859326Z', iopub.status.idle: '2024-03-05T11:29:01.638956Z', shell.execute_reply: '2024-03-05T11:29:01.638438Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("ncount")))
    + geom_histogram(binwidth=0.5)
    + facet_wrap("color")  # facet wrap
)
```

Here's an example of a facet grid with the count normalised in each grid:

```{python}
#| execution: {iopub.execute_input: '2024-03-05T11:29:01.641843Z', iopub.status.busy: '2024-03-05T11:29:01.641612Z', iopub.status.idle: '2024-03-05T11:29:05.063297Z', shell.execute_reply: '2024-03-05T11:29:05.062627Z'}
(
    ggplot(diamonds, aes(x="carat", y=after_stat("ncount")))
    + geom_histogram(binwidth=0.5)
    + facet_grid("cut", "color")
)
```

