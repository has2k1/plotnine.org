---
title: Smoothed Conditional Means
jupyter: python3
author: Hassan Kibirige
categories: [scatter plot, smooth]
---

{{< include _setup.qmd >}}
{{< include _add_img.qmd >}}

```{python}

from plotnine import ggplot, aes, geom_point, geom_smooth, labs, theme_matplotlib, theme_set
from plotnine.data import mpg

theme_set(theme_matplotlib())
```


*Aids the eye in seeing patterns in the presence of overplotting.*


```{python}
mpg.head()
```

```{python}
(
    ggplot(mpg, aes(x="displ", y="hwy"))
    + geom_point()
    + geom_smooth()
    + labs(x="displacement", y="horsepower")
)
```

{{< include _save_img.qmd >}}

Use `span` to control the "wiggliness" of the default loess smoother. The span is the fraction of points used to fit each local regression: small numbers make a wigglier curve, larger numbers make a smoother curve.

```{python}
(
    ggplot(mpg, aes(x="displ", y="hwy"))
    + geom_point()
    + geom_smooth(span=0.3)
    + labs(x="displacement", y="horsepower")
)
```

You can remove confidence interval around smooth with `se=False`:

```{python}
(
    ggplot(mpg, aes(x="displ", y="hwy"))
    + geom_point()
    + geom_smooth(span=0.3, se=False)
    + labs(x="displacement", y="horsepower")
)
```

Instead of a loess smooth, you can use any other modelling function:

```{python}
(
    ggplot(mpg, aes(x="displ", y="hwy"))
    + geom_point()
    + geom_smooth(method="lm")
    + labs(x="displacement", y="horsepower")
)
```

### Points & Linear Models

```{python}
# Gallery, points

(
    ggplot(mpg, aes(x="displ", y="hwy", color="factor(drv)"))
    + geom_point()
    + geom_smooth(method="lm")
    + labs(x="displacement", y="horsepower")
)
```

