---
title: Line Plot
jupyter: python3
categories: [line plot, facet, theme]
author: Hassan Kibirige
---

{{< include _setup.qmd >}}
{{< include _add_img.qmd >}}

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:10.732818Z', iopub.status.busy: '2024-03-05T15:41:10.732483Z', iopub.status.idle: '2024-03-05T15:41:11.521629Z', shell.execute_reply: '2024-03-05T15:41:11.520937Z'}
from plotnine import (
    ggplot,
    aes,
    geom_line,
    facet_wrap,
    labs,
    scale_x_datetime,
    element_text,
    theme_538
)
from plotnine.data import meat
```


`geom_line()` connects the dots, and is useful for time series data.


```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:11.525190Z', iopub.status.busy: '2024-03-05T15:41:11.524926Z', iopub.status.idle: '2024-03-05T15:41:11.538846Z', shell.execute_reply: '2024-03-05T15:41:11.538268Z'}
meat.head()
```

Make it tidy.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:11.581108Z', iopub.status.busy: '2024-03-05T15:41:11.580833Z', iopub.status.idle: '2024-03-05T15:41:11.592856Z', shell.execute_reply: '2024-03-05T15:41:11.592186Z'}
meat_long = meat.melt(
    id_vars="date",
    value_vars=["beef", "veal", "pork", "lamb_and_mutton", "broilers", "turkey"],
    var_name="animal",
    value_name="weight"
).dropna()

meat_long.head()
```

First try

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:11.595878Z', iopub.status.busy: '2024-03-05T15:41:11.595634Z', iopub.status.idle: '2024-03-05T15:41:13.012575Z', shell.execute_reply: '2024-03-05T15:41:13.011988Z'}
p = (
    ggplot(meat_long, aes(x="date", y="weight"))
    + geom_line()
)
p
```

It looks crowded because each there is more than one monthly entry at each x-point.
We can get a single trend line by getting a monthly aggregate of the weights.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:13.015534Z', iopub.status.busy: '2024-03-05T15:41:13.015226Z', iopub.status.idle: '2024-03-05T15:41:13.025519Z', shell.execute_reply: '2024-03-05T15:41:13.024894Z'}
meat_long_monthly_agg = meat_long.groupby("date").agg({"weight": "sum"}).reset_index()
meat_long_monthly_agg
```

### A Single Trend Line

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:13.028516Z', iopub.status.busy: '2024-03-05T15:41:13.028287Z', iopub.status.idle: '2024-03-05T15:41:13.273710Z', shell.execute_reply: '2024-03-05T15:41:13.273034Z'}
(
    ggplot(meat_long_monthly_agg, aes(x="date", y="weight"))
    + geom_line()
)
```

Add some style

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:13.276520Z', iopub.status.busy: '2024-03-05T15:41:13.276286Z', iopub.status.idle: '2024-03-05T15:41:13.563650Z', shell.execute_reply: '2024-03-05T15:41:13.563143Z'}
# Gallery, lines
(
    ggplot(meat_long_monthly_agg, aes(x="date", y="weight"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

Or we can group by the animals to get a trend line for each animal

### Multiple Trend Lines

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:13.566507Z', iopub.status.busy: '2024-03-05T15:41:13.566276Z', iopub.status.idle: '2024-03-05T15:41:13.904212Z', shell.execute_reply: '2024-03-05T15:41:13.903640Z'}
(
    ggplot(meat_long, aes(x="date", y="weight", group="animal"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

Make each group be a different color.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:13.907583Z', iopub.status.busy: '2024-03-05T15:41:13.907352Z', iopub.status.idle: '2024-03-05T15:41:14.330240Z', shell.execute_reply: '2024-03-05T15:41:14.329688Z'}
# Gallery, lines
(
    ggplot(meat_long, aes(x="date", y="weight", color="animal"))
    + geom_line()
    # Styling
    + scale_x_datetime(date_breaks="10 years", date_labels="%Y")
    + theme_538()
)
```

### A Trend Line Per Facet

Plot each group on a separate panel. The legend is no longer required and we adjust to the smaller panels by reducing the `size` of the line, `size` of the text and the number of grid lines.

```{python}
#| execution: {iopub.execute_input: '2024-03-05T15:41:14.333611Z', iopub.status.busy: '2024-03-05T15:41:14.333383Z', iopub.status.idle: '2024-03-05T15:41:15.119156Z', shell.execute_reply: '2024-03-05T15:41:15.118578Z'}
# Gallery, lines
def titled(strip_title):
    return " ".join(s.title() if s != "and" else s for s in strip_title.split("_"))

(
    ggplot(meat_long, aes("date", "weight", color="animal"))
    + geom_line(size=.5, show_legend=False)
    + facet_wrap("animal", labeller=titled)
    + scale_x_datetime(date_breaks="20 years", date_labels="%Y")
    + labs(
        x="Date",
        y="Weight (million pounds)",
        title="Meat Production"
    )
    + theme_538(base_size=9)
)
```

{{< include _save_img.qmd >}}
