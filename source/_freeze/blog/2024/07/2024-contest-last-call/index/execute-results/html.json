{
  "hash": "8bfa17049fea48a3a30ac41ce71b26e1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \" 2024 Plotnine Contest - Last Call\"\n# description: \"The contest is coming to and end, it could do  some \"\ndate: \"2024-07-22\"\ncategories: [contest]\nimage: \"a-spiky-sunset-at-the-beach.png\"\naliases:\n   - blog/2024-07-22-contest-last-call\n---\n\n\n\n\nThe 2024 Plotnine Contest will close in 5 days on 26th July 2024, this is after a two week extension.\n\nWe have [many](https://github.com/has2k1/plotnine/discussions/categories/2024-plotnine-contest?discussions_q=category:%222024+Plotnine+Contest%22+sort:date_created) submissions already but we could have move in these two categories.\n\n## 1. Visualisation of Distributions\n\nMost of the time, the main plot of statistical graphics is to get a sense of how the data is distributed. I would love to see more submissions of this type. This [resource](https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/dists.html) from the University of Iowa is a good introduction to the kinds of ways you can visualise distributions. I think there is plenty of room for otherwise simple visualisations of data distributions made more compelling by the choice of dataset, colors, annotations and overall polish.\n\n## 2. Visualisation Art\n\nPlotnine implements _The Grammar of Graphics_, which moulds Drawing and Painting Art into a system suitable for statistical graphics. Constrained within, the Art says \"I want to break free\" and a contest is the party at which to break free. We got all week.\n\nA contest is a good trigger to spark you into action towards that which you have long procastinated or genuinely stayed away from for fear catching an unhealthy addiction.\n\nA contest can trigger you into action on tasks you've long procrastinated or avoided due to concerns about developing an unhealthy addiction. This one may have got me. Inspired by a [Yan Holtz](https://r-graph-gallery.com/137-spring-shapes-data-art.html) piece, [Michael Chow](https://mchow.com/posts/plotnine-art) has deeped into generative art for this contest. In turn, I have given it a go.\n\nFrom Yan and through Michael, I get an abstract form and first I unpaint it to reveal its spiky nature.\n\n###  The Spiky World\n\n::: {#42717aac .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nfrom plotnine import (\n    aes,\n    coord_cartesian,\n    element_rect,\n    geom_area,\n    ggplot,\n    scale_color_manual,\n    theme_void,\n    theme,\n)\nimport pandas as pd\nimport numpy as np\n\n\nnum_groups = 30\n\ndef get_colors(cmap_name, start=0, stop=1, n=10):\n    \"\"\"Return colors from a colormap\"\"\"\n    from mizani.palettes import get_colormap\n    x = np.linspace(start, stop, n)\n    return get_colormap(cmap_name).continuous_palette(x)\n\ndef combine(colors: list[str]):\n    from mizani.palettes import gradient_n_pal\n    x = np.linspace(0, 1, num_groups)\n    return gradient_n_pal(colors)(x)\n\ndef make_data(seed=123):\n    names = [f\"G{i}\" for i in range(num_groups)]\n    population = [0] * 100 + list(range(1, num_groups+1))\n    rs = np.random.RandomState(seed)\n    frames = []\n    for i in range(30):\n        arr = rs.choice(population, num_groups)\n        _data = pd.DataFrame({\n            \"x\": i,\n            \"y\": arr / np.sum(arr),\n            \"g\": rs.choice(names, num_groups, replace=False),\n        })\n        frames.append(_data)\n    return pd.concat(frames).sort_values([\"x\", \"g\"])\n\ndef blink(colors: list[str] | list[list[str]], seed=123):\n    data = make_data(seed)\n    p = (\n        ggplot(data, aes(x=\"x\", y=\"y\", fill=\"g\", color=\"g\"))\n        + geom_area(show_legend=False)\n        + coord_cartesian(expand=False)\n        + scale_color_manual(values=combine(colors), aesthetics=[\"fill\", \"color\"])\n        + theme_void()\n    )\n    return p\n\n(\n    ggplot(make_data(), aes(x=\"x\", y=\"y\", group=\"g\"))\n    + geom_area(fill=\"white\", color=\"black\", show_legend=False)\n    + coord_cartesian(expand=False)\n    + theme_void()\n    + theme(plot_background=element_rect(fill=\"white\"))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=672 height=480}\n:::\n:::\n\n\nThen with each blink of the eye, _The Spiky World_ reveals one of her infinite faces.\n\nBlink.\n\n### Spiky Desert Dunes\n\n::: {#905ef14c .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nblink(get_colors(\"inferno\", .5, 1)[::-1])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=672 height=480}\n:::\n:::\n\n\nBlink.\n\n### A Spiky Volcano\n\n::: {#8343685f .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nblink(get_colors(\"magma\", .3, .95))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=672 height=480}\n:::\n:::\n\n\nBlink.\n\n### A Morning in a Spiky Forest\n\n::: {#0792fd4e .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nblink(get_colors(\"Greens\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=672 height=480}\n:::\n:::\n\n\nBlink.\n\n### A Spiky Sunset at the Beach\n\n::: {#1a46779a .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nblink([\n    *reversed(get_colors(\"YlOrBr\", 0.4, 0.7)),\n    *reversed(get_colors(\"Blues\", 0.25, 0.7)),\n    *reversed(get_colors(\"Oranges\", 0.05, 0.3)),\n])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=672 height=480}\n:::\n:::\n\n\nThis is generative art, the art that never ends. I did not know. I started blinking. I must continue blinking forever.\n\nCreate your world, blink and [share](https://github.com/has2k1/plotnine/discussions/788) what you see.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}